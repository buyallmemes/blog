[
  {
    "filename": "20250525-let-go.md",
    "content": "<h2>Long-Term Java</h2>\n<p>My coding journey began with BASIC on an IBM 286 PC,\nthen spiraled into Assembly, C, C++, Pascal, and Delphi during school and university.\nMy professional career began with PHP in 2009, followed by a brief romance with Ruby on Rails, and then—<strong>Java</strong>.</p>\n<p>From 2011 to mid-2024, I lived and breathed <strong>Java</strong> almost exclusively.\nSure, I dabbled in JavaScript (an occupational hazard for any web developer),\nand played with Scala, Elixir, Clojure, and Rust, to name a few.\nBut I always came back to Java.<br>\nI love Java.\nThe language is amazing, and its ecosystem is simply the best there is.\nEspecially Spring — I attribute most of Java's success to it,\nthere's nothing even remotely close.<br>\nI consider myself a Java guy.\nHell, I’m even a certified Oracle Java Professional Programmer, FFS.</p>\n<h2>The Red Flags</h2>\n<blockquote>\n<p>My disappointment is immeasurable, and my day is ruined (c) TheReportOfTheWeek</p>\n</blockquote>\n<p>But after 13 years in a committed relationship, I started noticing the red flags.\nI can count on one hand the Java codebases I'd call truly &quot;clean&quot; —\nand I might still have fingers left over.\nWhy?\nHave I only worked with &quot;bad&quot; programmers?\nAbsolutely not.\nDo I have unrealistic standards?\nI don't think so.<br>\nAt some point, it started to feel impossible.\nAnd then I caught an intrusive thought: the biggest problem with Java is... drumroll... <strong>the people</strong>.<br>\nWe are <em>different</em>, we've lived through <em>different</em> experiences, and we see things <em>differently</em>.\nAnd Java plays very strongly to those <em>differences</em>.\nIt provides too many options, too many ways to do the same thing, and too many paradigms all over the place.\nEspecially now, when the release cadence is every six months, code written 3–5 years ago looks very much dated.\nAnd code written in Java 6 (God bless) isn’t even considered Java anymore.\nIt’s paleontology.</p>\n<p>Picture this: You join a new team.\nOne developer has built a reactive streams pipeline that looks like it belongs in a Haskell textbook.\nAnother has crafted a classical inheritance hierarchy so deep it makes your IDE scroll bar weep.\nA third has written what's essentially C with classes — static methods everywhere, zero abstraction.\nAll three claim they're writing &quot;good Java.&quot;\nAll three are technically correct.\nAnd that's the problem.</p>\n<p>That’s not flexibility — that’s chaos.</p>\n<h2>The Accidental Go</h2>\n<p>Mid 2024, life threw me a curveball disguised as a job offer.</p>\n<p>I got hired as a Staff Engineer by a company that doesn't use much Java\nbut primarily uses Go as a go-to language (yes, the pun is unavoidable, deal with it).\nBy the time I signed the final offer, I had little to no idea what Go was.\n&quot;Oh well, it's something from Google, and Kubernetes and Docker are written in it.&quot;\nDuring the interview process,\nI was told: &quot;Don't worry, we hire a lot of Java people without Go background, you'll be fine.&quot;\nIf you say so.</p>\n<p>It's been almost a year at the time of writing this, and oh my God, I'm more than fine.\nI don't remember the last time I had so much fun programming on the weekend by myself.\nIt feels so natural, fluent, and addictive.\nI'm constantly in the process of building something, be it a small AI-integrated CLI tool,\nmicro AWS Lambda for a Telegram bot, or a backend that powers this blog.</p>\n<h2>Simplicity's Strength</h2>\n<p>The more I think about it, the more I realize — Google engineers who created GO are geniuses.\nThey made a perfect language for an average Joe.\nThe language follows a brutally simple motto: <strong>Less is more</strong>.\nIn fact, Go is the only language that consistently hosts conferences where people discuss features that should be\n<strong><em>REMOVED</em></strong> from the language.\n<strong><em>REMOVED</em></strong>.\nThree ways to declare a variable?\nToo many.\nLeave one.<br>\nOf course, it's not happening because it will break backwards compatibility,\nbut this is the narrative that drives the community.\nAnd it works.</p>\n<p>After half a year of writing and reading Go daily,\nI opened the source code of Kubernetes — which is more than a decade old — and... understood everything.\nIt's not an ancient manuscript to me.\nIt's the same code I'm writing daily.\nSure, the structure of the project and some approaches may differ, but the code is the same:</p>\n<ul>\n<li>The same for-loops, if-statements, and variable assignments</li>\n<li>The same structs and interfaces on the consumer side (I freaking love it)</li>\n<li>Go's infamous clunky error handling</li>\n<li>The context is passed everywhere as a first parameter</li>\n<li>And tests look identical</li>\n</ul>\n<p>And one more—<em>everything is formatted the same</em>.</p>\n<blockquote>\n<p>And don't get me started on the formatting wars...<br>\nNothing I hate more than pointless styleguide discussions.<br>\nAll those hours and energy wasted debating tabs vs spaces,\nline length limits, bracket positions, and chain-method alignments...<br>\nEver hit &quot;Reformat&quot; on legacy code and Git blamed you for the whole mess?\n“Who wrote this crap?”\n“Apparently... Dave.\nLast Tuesday.”\nAll because he hit Ctrl+Alt+L.<br>\n<strong>They played us for absolute fools.</strong><br>\nGo just skipped the whole charade from day one with <code>gofmt</code>.<br>\n<a href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;t=523s&amp;ab_channel=TheGoProgrammingLanguage\">Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.</a><br>\nThis is the way.</p>\n</blockquote>\n<p>If this is not a success - I don't know what is.</p>\n<p>For comparison, I tried to look at the source code of Apache Kafka once,\nand I couldn't understand much.\n&quot;What is this piece of code doing?\nSomething, I guess.&quot;\n— It looked nothing like the Java I've written for over a decade.</p>\n<p>Another time, I wanted to fix a bug in an open-source <code>openapi-diff</code> library.\nI don't know what those guys were on,\nbut this stuff is considered <em>too hardcore</em> even by the Berlin industrial techno scene.\nTo me, it made absolutely no sense.\nJust a bunch of eccentric abstractions.\nThe source code of Kafka at least made some sense.</p>\n<h2>Talk is cheap. Show me the code.</h2>\n<p>Let me give you a quick taste of Go.</p>\n<p>I'm not going to explain how to write for-loop or an if-statement.\nYou can figure it out by yourself.<br>\nInstead, I'll show you how to build a HelloWorld library and use it in another project.\nIt takes minutes, and it's freaking awesome.</p>\n<p>Preconditions:</p>\n<ul>\n<li>Installed Go — google it, almost every package manager can do it</li>\n<li>Access to a git repo — we need a place to store our code</li>\n</ul>\n<p>I’m not going to waste time walking you through environment setup —\nthere are plenty of resources online for that.</p>\n<p>Let's jump straight to the point.</p>\n<pre><code class=\"language-bash\">mkdir go-hello-world-lib\ncd go-hello-world-lib\ngo mod init github.com/{your_repo}/go-hello-world-lib\n</code></pre>\n<p>I hope the first two lines are self-explanatory.<br>\n<code>go mod init github.com/{your_repo}/go-hello-world-lib</code> <strong>init</strong>ializes go <strong>mod</strong>ule - a single <code>go.mod</code> file that\nholds information about the module, such as its name, Go version, dependencies, etc.\nIn my case, the module name is <code>github.com/mfenderov/go-hello-world-lib</code> -\ntechnically, it could be whatever I want,\nbut it's a convention to name a module using a git repo URL,\nI'm going to use GitHub in this case because I'm going for a fancy-pants open-source library, of course.<br>\nContent of <code>go.mod</code>:</p>\n<pre><code class=\"language-bash\">module github.com/mfenderov/go-hello-world-lib\n\ngo 1.24.3\n</code></pre>\n<p>As I mentioned above, the module name and Go version.\nNothing else.</p>\n<p>Now, use the editor of your choice and create the <code>main.go</code> file near <code>go.mod</code>, with a code like this:</p>\n<pre><code class=\"language-go\">package main\n\nfunc main() {\n\tprintln(&quot;Hello World!&quot;)\n}\n\n</code></pre>\n<p>As Hello World as it gets.</p>\n<blockquote>\n<p>You'd better get used to shortcutting everything.\nThere's no time to type <code>function</code> - it's a <code>func</code> now.<br>\nI guess it's to prevent people from mixing Go with JavaScript.\nI don't like it, but it is what it is.</p>\n</blockquote>\n<p>What is important here is the package name.\nA package is the smallest unit of organization in Go.\nIt's basically a container for code and a means of encapsulation.\nKind of like in Java.</p>\n<p>Now let's execute the code:</p>\n<pre><code class=\"language-bash\">go run main.go\n</code></pre>\n<p>Or, if we’re in the same folder, we can just run:</p>\n<pre><code class=\"language-bash\">go run .\n</code></pre>\n<p>The runner will scan the folder in search of the <code>main</code> package\nand then execute the <code>main</code> function(<code>public static void main</code> sends its regards).</p>\n<p>This should print <code>Hello World!</code>.\nInteresting? Not really.</p>\n<blockquote>\n<p>Worth mentioning that while a directory defines a single package, Go has a neat convention for tests.\nYou can put test files (e.g., something_test.go) in the same directory.\nIf you use the same package name (package main), tests get full access.\nOr you can use a suffix like <code>package main_test</code> to restrict tests to public APIs only.\nThese <code>_test</code> packages reside in the same folder but are compiled separately, providing high cohesion of source code\nwhile ensuring tests only use the public API of the package under test.\nClean and flexible.</p>\n</blockquote>\n<p>Now, let's perform a little refactoring — extract the <code>Hello World!</code> logic into a separate function.</p>\n<pre><code class=\"language-go\">package main\n\nfunc Hello() {\n\tprintln(&quot;Hello World!&quot;)\n}\n\nfunc main() {\n\tHello()\n}\n</code></pre>\n<p>Noticed capital <code>H</code> in <code>func Hello()</code>?\nThis is how primitives (functions, variables, structs, interfaces, etc.) are exposed outside the package.\nSort of like <code>public</code> and <code>private</code>(package private to be exact) modifiers in Java.\nCapital letter — public, lowercase — package private.\nEverything within a package is visible to all members of the package.<br>\nEasy enough?</p>\n<p>How about a little trick?</p>\n<pre><code class=\"language-go\">package main\n\nfunc Hello() {\n\tprintln(&quot;Hello World!&quot;)\n}\n\nfunc main() {\n\thelloFunc := Hello\n\thelloFunc()\n}\n</code></pre>\n<p>This is, of course, an absolutely valid Go program.\nThe function <code>Hello</code> was assigned to a variable and called using <code>()</code> on the next line.\nAnd since it's just a variable, it can be passed around.\nFunctional and effortless.</p>\n<p>Now let's build it:</p>\n<pre><code class=\"language-bash\">go build main.go\n</code></pre>\n<p>This command compiles our wonderful Go program into a native executable.<br>\nFile <code>main</code> without any extension should appear nearby.\nLet's execute it:</p>\n<pre><code class=\"language-bash\">./main\n</code></pre>\n<p>Voilà!\nNative Hello World!\nHow about that, Java?<br>\nNo Docker, no JVM, no GraalVM, no separate runtimes at all.\nPure efficiency instead.<br>\nWant to forget about silly, untestable, unreadable, unmaintainable build scripts?\nUse Go.</p>\n<p>Now, let’s turn this into a library.\nGo’s dependency system is laughably simple: it’s just Git.<br>\nEvery library is just a Git repo, and its version is a Git tag.\nThat's it.\nNo complexity.<br>\nFor example, if I want to use <code>github.com/mfenderov/go-hello-world-lib</code> version <code>v0.0.1</code>,\nit means there should be a Git repository with that URL\nand a commit tagged with <code>v0.0.1</code>.\nNo third-party Artifactories, no Maven Centrals, no npm repositories with mysterious outages.\nThe library points straight to the source.<br>\nElegant simplicity at its finest.</p>\n<p>But does this mean that every Git repo is automatically a Go library?\nActually, yes - any Git repo with a proper Go module structure can be used as a dependency.\nHowever, to make your library more discoverable and provide official documentation,\nyou should list it on <code>https://pkg.go.dev/</code>.\nThis step isn't strictly required for usage, but it's good practice for any library you want others to find and use.</p>\n<p>How do you get your library listed?\nRidiculously easy.\nYou need a publicly accessible Git repo,\ntag your commit,\nand execute the <code>go list</code> command.\nThe whole process looks something like this:</p>\n<pre><code class=\"language-bash\">git tag v0.0.1\ngit push origin v0.0.1\nGOPROXY=proxy.golang.org go list -m github.com/{your_repo}/go-hello-world-lib@v0.0.1\n</code></pre>\n<p>This tells Go's module proxy to fetch and cache your library, making it available to the entire Go ecosystem.</p>\n<p>To test it, initialize a new Go module with the <code>go mod init</code> command\nand get the dependency via <code>go get github.com/{your_repo}/go-hello-world-lib@v0.0.1</code>.</p>\n<p>This is the most straightforward way to release a library I've ever seen.<br>\nWith some basic CI/CD sprinkles, the whole publishing &quot;process&quot; just disappears.</p>\n<p>Go also has a built-in dependency updater:</p>\n<pre><code class=\"language-bash\">go get -u ./...\n</code></pre>\n<p>Bam, and all our dependencies will be updated to the latest versions.\nBy default, it updates only minor or patch versions of all dependencies.\nI ran it every once in a while, just to be on top of my things.</p>\n<h2>Conclusion</h2>\n<p>I'm not here to convert anyone.\nJava will always have a special place in my heart, and honestly,\nit pays the bills for millions of developers.\nBut after a year with Go,\nI can't unsee what I've seen.\nThe simplicity, the consistency,\nthe fact that I can actually read decade-old code without a PhD in software archaeology—it's liberating.\nI'm completely sold on Go's ideas,\nand right now,\nI have zero desire to write any Java again.</p>\n<p>Sometimes the most radical thing you can do is choose simple over clever.<br>\nSometimes, you just need to let go.</p>\n",
    "date": "25.05.2025",
    "title": "Let Go",
    "anchor": "let-go"
  },
  {
    "filename": "20240516-testing-guideline.md",
    "content": "<p>I wrote this article quite some time ago and parked it on the company's confluence page.</p>\n<p>Although it was super exciting to write,\nand I tried to promote it internally to the best of my ability,\nit turned out to be yet another cold documentation.</p>\n<p>But I liked it so much, that I think it's worth revisiting and publishing in the open.</p>\n<h1>Testing</h1>\n<h2>Why test?</h2>\n<p>I think it's mostly clear, but nonetheless, I will outline a couple of the most important reasons.</p>\n<h3>We want our software to work</h3>\n<p>Testing is an essential part of software development that helps ensure that an application works as intended and meets\nthe expectations of users.\nWithout tests, it's almost impossible to prove, that the functionality does what it's supposed to do -\nit's just an educated guess.</p>\n<h3>We want our software to continue working</h3>\n<p>The true cost of software is in its maintenance.\nTime and money invested into maintenance dwarfs initial development investment.\nAnd the larger the codebase, the less and less important the initial development investment cost is.\nMaintainability should be the main factor when developing software.<br>\nWe’re getting inevitably slower as the code degrades over time.\nTests enable us to ease the pain of maintenance by turning it into a simple routine activity.<br>\nWell-written tests enable change.\nThey enable options.</p>\n<h3>People interaction</h3>\n<p>Counterintuitively, tests help with readability.\nThey shift attention from implementation details to behavior, usability, and user-friendliness,\nwhich ends up in much more simple code.\nWe spend 10x more time reading code when writing.\nSomething written in ~5 minutes will be read for an hour.\nThink about this next time you will spend hours coding.</p>\n<p>Speaking in financial terms:\n<strong>code is a liability</strong> — it is something that requires more and more investments over time to keep it working.\nThe larger the codebase, the more maintenance, bug fixing, and refactoring it requires.<br>\nOn the other hand, <strong>test suite is your asset</strong> — it is something that helps to deal with the liability.\nWell-written test suite will continuously pay its dividends.<br>\nAnd if financial gurus are teaching us something,\nis that we should invest (time and money) in assets, and not liabilities.</p>\n<p>Tests are never obsolete, they act as a living specification forever.</p>\n<p>Don’t confuse anything of that with &quot;easy.&quot;\nWriting good tests and good code is not easy.\nIt requires discipline and practice.\nConstant practice.</p>\n<p>So let's go through the most important aspects that I picked up over the years of writing awesome tests one-by-one.</p>\n<h1>Understand the Classic Testing Pyramid</h1>\n<p>It all starts with the testing pyramid —\na testing strategy that emphasizes the importance of having a balanced mix of different types of tests.\nThere are many types of tests, but they can be categorized into three groups:</p>\n<ul>\n<li>unit tests</li>\n<li>integration tests</li>\n<li>end-to-end tests</li>\n</ul>\n<p>The aim is to have a higher percentage of unit tests and a lower percentage of end-to-end tests to ensure faster\nfeedback loops and more robust code.</p>\n<p><img src=\"assets/20240406-tg/image-20230327-114635.png\" alt=\"\"></p>\n<p><em>$$$ — expensive tests, a lot of machinery and time are involved</em></p>\n<p><em>$ — cheap tests, very little resources and time are required</em></p>\n<p>In this article, I will mainly focus on unit tests with sprinkles of integration tests.</p>\n<h4>References</h4>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">The Practical Test Pyramid</a></li>\n</ul>\n<h1>Unit tests</h1>\n<h2>What is a <em>unit</em>?</h2>\n<p>Before I dive deep into technics and dos-and-don'ts, we have to come to terms with &quot;What is a <em>unit</em>?&quot;.</p>\n<blockquote>\n<p>&quot;Unit — an individual thing or person regarded as single and complete but which can also form an individual component\nof a larger or more complex whole.&quot;— Google a.k.a.\nOxford dictionary</p>\n</blockquote>\n<p>Interesting, but a bit too broad.</p>\n<p>How about this?</p>\n<blockquote>\n<p>&quot;In computer programming, unit testing is a software testing method by which individual units\nof source code—sets of one or more computer program modules together with associated control data, usage procedures,\nand operating procedures—are tested to determine whether they are fit for use.\nIt is a standard step in development and implementation approaches such as\nAgile.&quot;- https://en.wikipedia.org/wiki/Unit_testing</p>\n</blockquote>\n<p>Noticed anything?<br>\nThere's nothing about a &quot;single line of code,&quot; a &quot;single method&quot; or even a &quot;single class.&quot;<br>\nThis is one of the most common misconceptions.\nSomehow &quot;unit&quot; is commonly interpreted as &quot;a method&quot; or even worse — &quot;a line of code.&quot;\nAnd so unit testing becomes method testing, line testing, etc.<br>\nThis is very one-dimensional and crude.<br>\nYes, it's important for every method and every line of code to be tested,\nbut it should also make sense in the grand schema of things.</p>\n<p>Allow me to elaborate.\nIf I'm introducing a change (whatever it might be: feature, bugfix, etc.), what is more important?</p>\n<ul>\n<li>for the change to work</li>\n<li>for some method to return the right value</li>\n</ul>\n<p>Well, the answer is clear —\nit's always more important for the whole <strong>change</strong> to work than for the method to return the right value.\nCode can have mistakes, but if the change performs as it should - who cares?\nThis is because the change is the unit in this case.\nNot a method or a line of code.\nThe code is just an implementation detail of this change.\nImportant detail, but a detail nonetheless.\nAnd details should be tested as part of something bigger.</p>\n<p>This realization made unit testing my best ally, instead of a chore.</p>\n<p>It's like LEGO.\nIs it important that all bricks are working?\nYes.\nBut will the satisfaction be the same if instead of a pirate ship,\nyou receive just a bunch of working bricks?\nI doubt so.</p>\n<h2>Write Effective Unit Tests</h2>\n<p>Here's my collection of techniques and best practices for writing awesome unit tests.\nDon't get me wrong, I haven't invented any of those —\nthis is just a collection that I've assembled over time from different sources: be it books, articles, conference talks,\nworkshops, and my colleagues.</p>\n<p>However, all this stuff is battle-tested.\nThere's not a single technique that I don't use daily.\nIf anything, there might be more.</p>\n<p>Some of these points are asymptotes —\nthey are hardly reachable 100% of the time, and it's fine, as long as there's a consistent upward trend.</p>\n<p>There are going to be quite a few code snippets, they all will be in <strong>Java</strong> with some sprinkles of <strong>Spring</strong>, for\nobvious reasons 😏.</p>\n<h3>Listen to your unit tests</h3>\n<p>Your unit tests are trying to tell you something, and if you want your code to be awesome, you have to listen.\nThey are your best allies.<br>\n“If tests are hard to write, the production design is crappy” - goes an old saying.\nIndeed, writing unit tests gives one of the most comprehensive,\nyet brutal feedback about the design of the system.</p>\n<p>From my experience,\nevery project where tests were treated like a chore or an afterthought had a horrible rotting codebase.\nNo exceptions.\nAnd the best codebases I worked with were always backed up by an amazing testing culture amongst developers.\nThere's nothing that hurts codebase more than a phrase: &quot;I'm finished with implementation, and now I'm writing tests.&quot;</p>\n<p>And this brings us to the next point...</p>\n<h3>Write unit tests early</h3>\n<p>Writing fine-grained unit tests early increases friction with bad design,\nhelps to understand the problem and clarify business requirements early in development,\ngives early design feedback, and produces real test coverage.</p>\n<p>Unit tests force the writer to think about a piece of code from the user’s perspective.\nThis coerces a cleaner and more effective design.</p>\n<p>Writing unit tests after the implementation is done is practically useless.\nAll mistakes are already made.\nBad design decisions as well.\nUnit tests will just &quot;solidify&quot; everything, and harm more than help.</p>\n<p>I'm not preaching about TDD.\nTDD is hard.\nBut writing unit tests early is not.\nHow early?\nAs early as possible.\nIdeally, first 😉.<br>\nWrite a little bit of code, then write a little bit of test, then write a little bit of code, etc.\nAs soon as you feel comfortable, skip the first step.</p>\n<h3>Testable Design is Good Design</h3>\n<p><img src=\"assets/20240406-tg/image-20230328-072454.png\" alt=\"\"></p>\n<p>Having to mock more than five plus dependencies is a sign of a bad production code design.</p>\n<p>It's better to have ten small classes with one-two dependency each,\nthan one mega-class with ten dependencies.\nThe ideal number of dependencies per class is zero, but this is hardly possible,\nbut the intention to have as few dependencies per class as possible should drive the design.</p>\n<h4><strong>Testing simplification is a great reason to refactor production code</strong></h4>\n<p>I once heard a phrase from a seasoned dev: &quot;Changing production code because of tests is a bad practice!&quot; —\nit goes without saying that the project codebase was one of the worst I ever worked with to this day.</p>\n<p>The pinnacle of this project for me was a 4-week sprint,\nduring which my team was extremely busy, but managed to produce so little output,\nthat during the monthly project demo, all we had to show for it was a small green text on a couple of web pages.<br>\nAnd nobody was laughing, because other teams(~15 in total) managed to produce even less.\nA couple of months later, the project with a 20mil euro a year budget was canceled after approximately 4 years of\ndevelopment.\nThe project was a massive failure.</p>\n<p>It was probably mismanaged all over the place,\nyes, but poor and unprofessional engineering &quot;ship-shit-fast&quot; culture didn't help,\nthat's for sure.\nOver 4 years, more than a hundred engineers(myself included) produced nothing but a raw unmaintainable mess,\nthat inevitably ground development to a halt.</p>\n<p>But I've learned a lot.\nNo matter how many hours I and my team put into a working week, the ever-growing mess will always outpace us.\nAnd the only way to move fast is to move with ever-increasing quality.\nAnd the only way to achieve ever-increasing quality is to mercilessly refactor existing code.\nAnd the only way to enable refactoring is to have rigorous testing ethics.</p>\n<p><strong>Moral of the story: good tests equal fast development.</strong></p>\n<h3>Test behavior, not implementation</h3>\n<p>This is big.</p>\n<p>This took me too long to realize.</p>\n<h4>Implementation changes should not break tests</h4>\n<p>If I want to perform some minor refactoring(tidying),\nlike rearranging methods, and classes, extracting new interfaces - something that keeps the behavior the same,\nI should be able to do it without breaking tests.\nThis is impossible if tests are written to test implementation (each method/line of code).</p>\n<p>My rule of thumb goes like this:\nAll the code I can merge into a single class without breaking the system and domain boundaries should be tested as\none.\nThe whole domain is a unit.</p>\n<p>Assuming I have something like this:</p>\n<pre><code class=\"language-bash\">├── buyallmemes\n│   ├── notification\n│   │   ├── NotificationUser.java\n│   │   ├── NotificationUserRetriever.java\n│   │   ├── NotificationUserMapper.java //maps something to something\n│   │   ├── EmailGatewayClient.java // sends message to queue\n│   │   ├── ... //domain specific logic\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   └──  UserModule.java //implements NotificationUserRetriever, retrieves a user from DB\n\n</code></pre>\n<p>There are several possibilities to scope tests:</p>\n<ul>\n<li>go by the &quot;book&quot; and test each class/method on its own mocking everything else</li>\n<li>scope tests around whole <code>NotificationModule</code> and mock only external dependencies</li>\n</ul>\n<p>This way, dependencies within the scope could be refactored.\nIt's much more flexible.\nAPI signatures could be changed freely.</p>\n<h3>Tests enable refactoring</h3>\n<p>It’s impossible to refactor code without tests.\nIt’s dangerous, time-consuming, and error-prone.\nIt’s not fun.\nThe number one precondition to any refactoring is a strong test suite, and there’s no way around it.\nUntested code cannot be adequately refactored.</p>\n<p>And nobody writes clean code from scratch.\nNot even the “strongest” programmers.\nThe &quot;stronger&quot; the programmer, the more he/she relies on an adequate test suite to support their messy code from the\nbeginning.</p>\n<p>I've been guilty of refactoring without tests in the past.\nIt's a dreadful experience.</p>\n<h3>Keep your tests clean</h3>\n<p>The cleanliness of tests is arguably even more important than the clean “production” code.\nThe code will inevitably change, it will evolve, and the only thing that will hold it accountable is tests.</p>\n<p>Try to avoid any “crafty” approaches.\nSettle for standard tools and practices.</p>\n<h4>The best test is the simple test</h4>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">\n@BeforeEach\nvoid setUp() {\n    MockitoAnnotations.openMocks(this);\n}\n</code></pre>\n<p>Deceiving. Hide unnecessary stubbing. Don’t do it.</p>\n<p><strong>Good:</strong></p>\n<pre><code class=\"language-java\">\n@ExtendWith(MockitoExtension.class)\nclass WonderfulServiceTest {\n...\n}\n</code></pre>\n<p>Reveals unnecessary stubbing, makes tests more readable, and adds more Mockito magic (in this case, this is a good\nthing).</p>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">private SystemUnderTest underTest;\n\n@Mock\nprivate MockOfSomething mock;\n\n@BeforeEach\nvoid beforeEach() {\n    underTest = new SystemUnderTest(mock);\n}\n</code></pre>\n<p><strong>Good:</strong></p>\n<pre><code class=\"language-java\">\n@InjectMocks\nprivate SystemUnderTest underTest;\n\n@Mock\nprivate MockOfSomething mock;\n</code></pre>\n<p>Clean. Less boilerplate code.</p>\n<p>Messy unit tests possess much greater risk than the absence of tests.\nThey create fake coverage and mislead into an idea that the code is working.</p>\n<p><strong>And stay away from reflection.</strong></p>\n<p>In Java world, tools like <strong>PowerMock</strong>,\n<strong>ReflectionUtils</strong> are a solid sign that something is fundamentally wrong with the code design.\nUnless you are building a reflection-based framework of some sort, there should be no need for such tools.</p>\n<h3>Review and refactor tests regularly</h3>\n<p>Just like production code, tests should be reviewed and refactored to\nensure that they are still valid and maintainable.\nThis includes removing redundant tests, consolidating duplicate\ntests, and improving test readability.</p>\n<h3>Keep your tests small and focused</h3>\n<p>Follow the AAA pattern (Arrange, Act, Assert)/GWT pattern (Given, When, Then)</p>\n<p><img src=\"assets/20240406-tg/image-20230327-122231.png\" alt=\"\"></p>\n<h3>Have many test classes per production class</h3>\n<p>Do not feel compelled to stuff all your tests for <code>FooService</code> into <code>FooServiceTest</code>.<br>\nEvery test that needs a slightly different setup should go into a separate test class.<br>\nIt helps to understand what exactly is going on in a test class.\nFor example, <code>FooServiceUserNotFoundExceptionTest</code> requires little to no explanations.</p>\n<ul>\n<li>\n<p>Not sure about where to put new tests? Create a new class.</p>\n</li>\n<li>\n<p>The test class is getting too big and requires a lot of doom-scrolling?\nSplit it into several test classes.\nThis is also a good indicator that the class under the test is too big with too many responsibilities.\nRefactor it.\nSplit it into smaller pieces.</p>\n</li>\n</ul>\n<p>Once again, <strong>the best test is the simple test</strong></p>\n<h3>Test what’s important first</h3>\n<ol>\n<li>\n<p>Happy paths.<br>\nIt's a good idea to start with something simple, something satisfying.</p>\n</li>\n<li>\n<p>Code that you fear.<br>\nThis should be your primary objective.\nThe first test is the hardest to write, and as soon as you crack it -\neverything else will fall apart with ease.</p>\n</li>\n<li>\n<p>Deeply encapsulated logic that is hard to reach via API.<br>\nThe logic that requires a lot of state management.\nSometimes it's not possible to test the whole change in isolation,\nand this is where &quot;method by method&quot; tests become useful.\nDon't overdo it.</p>\n</li>\n<li>\n<p>A bug.<br>\nEvery time you write a failing test that proves the bug before fixing that bug - you deserve a small salary raise.\nThis is what truly differentiates the best from the rest.\nPersonally, I found this extremely satisfying to see my failed test prove a bug, just then to be fixed.\nOr even better, a test that should fail — passes, because the initial &quot;bug&quot; assumption was wrong.\nI can't stress enough how powerful this technique is.</p>\n</li>\n<li>\n<p>Validation.<br>\nPlaces with high cyclomatic complexity.<br>\n<code>if</code>, <code>for</code>, <code>while</code>, etc.</p>\n</li>\n<li>\n<p>Exceptional cases.<br>\nAll your <code>throws</code> and <code>try catch</code>.\nTest it, but maybe a bit later.</p>\n</li>\n<li>\n<p>Facade methods.<br>\nMethods that just call another method or two.\nIf you have time - do it.\nWhat are the chances that someone will accidentally delete one of those calls?\nThese methods usually could be tested in a bundle with some other logical parts.</p>\n</li>\n<li>\n<p>Trivial code.<br>\nGetters/Setters.\nNot the best way to increase code coverage.\nSame as for the facade methods — your getters/setters/mappers should be tested as part of something more meaningful.</p>\n</li>\n<li>\n<p>Legacy code that never changes with no bugs.<br>\nIf it works — don’t touch it.\nLeave it be.\nFind something better to do.</p>\n</li>\n</ol>\n<p>Don’t start testing by passing <code>null</code> and empty collections.<br>\nDon’t start testing with extremely rare edge cases.<br>\nFocus on what’s important first.<br>\nUse code coverage to detect missed paths.</p>\n<p>Don’t strive to have high code coverage for the manager's sake.</p>\n<h4>Strive to have meaningful tests that you trust with your life</h4>\n<p><a href=\"https://en.wikipedia.org/wiki/Pareto_principle\">Pareto principle</a> applies to tests quite well.\n80% coverage could be achieved by spending just a little bit of effort.\nThe last 20% of coverage will take you approximately four times as much.</p>\n<p><img src=\"assets/20240406-tg/image-20230331-114754.png\" alt=\"\"></p>\n<h3>Keep your unit tests fast</h3>\n<p><em>Ludicrously</em> fast.\nRun unit tests often.\nRun unit tests all the time.<br>\nKeep in mind that unit tests are focussing on behavior.\nTiming and concurrency should never be a part of the unit test — otherwise,\nyou end up with non-deterministic results.</p>\n<ul>\n<li>\n<p>No <code>Thread.sleep(..)</code>.</p>\n</li>\n<li>\n<p>No <a href=\"http://www.awaitility.org/\">http://www.awaitility.org/</a>.</p>\n</li>\n<li>\n<p>No <code>while(...){...}</code></p>\n</li>\n</ul>\n<p>Keep these techniques for integration tests.</p>\n<p>Actively look for slow unit tests and investigate.\nThe usual suspects are Reflection and his best friend Mockin Static.\nTo fight with the <code>static</code> disease - convert <code>static</code> methods into small instanced components.</p>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">public class SomethingSometingUtil {\n    private SomethingSometingUtil() { //look ma, I know about default constructor\n    }\n\n    public static Something convert(SomethingElse somethingElse) {\n        Something something = new Something();\n        something.setSomeField(somethingElse.getSomeField());\n        return something;\n    }\n}\n</code></pre>\n<p>The only way to mock this is via <code>Mockito.staticMock(SomethingSometingUtil.class)</code>\nor tools such as <code>PowerMockito</code>.\nThis slows down tests considerably and makes them hard to work with.\nOverall, <code>static</code> is considered <em>by me</em> to be a terrible practice.</p>\n<p><strong>Good:</strong></p>\n<pre><code class=\"language-java\">\n@Component\npublic class SomethingSomethingConverter {\n    public Something convert(SomethingElse somethingElse) {\n        return SomethingSometingUtil.convert(somethingElse);\n    }\n}\n</code></pre>\n<p>In case it is impossible to refactor (and get rid of) <code>SomethingSometingUtil</code> in one go(3rd party library, too heavily\nused in production code),\nit is perfectly fine to introduce a decorator-ish component that wraps static nonsense.\nThe new component could be easily controlled, mocked, and tested.\nThis speeds up tests considerably and makes the code much cleaner in general.</p>\n<p>Although some literature suggests that talking to a database or a queue during a unit test is fine, I disagree.\nI like to keep my unit tests simple, fast, and away from the network.</p>\n<h3>Keep your tests 100% deterministic</h3>\n<ul>\n<li>\n<p>No flakiness.</p>\n</li>\n<li>\n<p>No time dependence.<br>\nAvoid <code>Instance.now()</code>and such.\nInstead, create a small component and inject it <strong><em>everywhere</em></strong> you need a current\ndate.</p>\n<pre><code class=\"language-java\">@Component\npublic class DateService { // naming is hard, but we can always change it\n    public Instant getNow(){\n        return Instant.now(); //static methods are a bad practice, by the way\n    }\n}\n</code></pre>\n<p>It could be easily mocked and tested.\nA thing of beauty.</p>\n</li>\n<li>\n<p>No network interaction — the network is slow, avoid it</p>\n</li>\n<li>\n<p>Avoid concurrency and multithreading, unless this is your prime objective</p>\n</li>\n</ul>\n<h3>Use mocking judiciously</h3>\n<ul>\n<li>\n<p>Mock behavior, not data.<br>\n<strong>Bad:</strong></p>\n<pre><code class=\"language-java\">MyBelovedDTO dto = mock(MyBelovedDTO.class);\n</code></pre>\n<p>Why?\nI see this all the time, and every single time my reaction is &quot;Why?&quot;\nAfter all these years, I still don't understand.\nI probably missed a memo or something.\nIn most cases, there's a beautiful builder pattern hidden somewhere.\nUse it.\nThere’s none?\nAdd a builder pattern and use it.\nIf there’s no access to the source code(3rd party library), invest in creating a dedicated builder just for\ntesting.<br>\n<strong>Good:</strong></p>\n<pre><code class=\"language-java\">MyBeloverDTO dto = new MyBeloverDTOBuilder() //builder could be a standalone class\n                               ...           //use builder setters\n                               .build();     //ugly target class is encapsulated\n</code></pre>\n</li>\n<li>\n<p>Don't Mock Getters.<br>\nJust don’t.</p>\n</li>\n<li>\n<p>Don't have Mocks return Mocks.<br>\nEvery time you do that, a fairy dies 🧚😢</p>\n</li>\n<li>\n<p>Overuse of mocks leads to brittle tests and code that is difficult to maintain.</p>\n</li>\n</ul>\n<p>It is perfectly fine to use <em>real classes</em> instead of mocked interfaces.<br>\nMocked interfaces are hard to change - every API change will break <strong>ALL</strong> tests.\nDo yourself a favor, and don't solidify interfaces between components prematurely.\nThis is especially true in the early stages of development.\nMock a bit further from the class you are testing, and leave yourself room to wiggle.\nOr even better - start with a small integration test.</p>\n<p>Assuming we have something like:</p>\n<pre><code class=\"language-java\">\n@RequiredArgsConstructor\nclass A {\n  private final B b;\n\n  public String getSomething() {\n      return b.computeSomething();\n  }\n}\n\n@RequiredArgsConstructor\nclass B {\n  private final CRepository cRepository;\n\n  public String computeSomething() {\n      return cRepository.getSomething() + &quot; World!&quot;;\n  }\n}\n\nclass CRepository {\n  // represention of a database\n  public String getSomething() {\n      return &quot;Hello&quot;;\n  }\n}\n</code></pre>\n<p>Class <strong>A</strong> injects class <strong>B</strong>, and class <strong>B</strong> injects class <strong>CRepository</strong>. Nothing crazy.</p>\n<p><strong>Might be too fragile:</strong></p>\n<pre><code class=\"language-java\">\n@ExtendWith(MockitoExtension.class)\npublic class ATest {\n\n    @InjectMocks\n    private A a;\n\n    @Mock\n    private B b;\n\n    @Test\n    void test() {\n        when(b.computeSomething()).thenReturn(&quot;Hello World!&quot;);\n        String actual = a.getSomething();\n        assertEquals(&quot;Hello World!&quot;, actual);\n    }\n}\n</code></pre>\n<p>The interface between <strong>A</strong> and <strong>B</strong> is effectively locked.\nThe only change we can make without breaking the test is renaming via IDE.\nIt's useful, but nothing spectacular.</p>\n<p><strong>Might be more elastic:</strong></p>\n<pre><code class=\"language-java\">\n@ExtendWith(MockitoExtension.class)\npublic class ATest {\n\n    private A a;\n\n    @InjectMocks\n    private B b;\n\n    @Mock\n    private CRepository cRepository;\n\n    @BeforeEach\n    void setUp() {\n        a = new A(b); //real implementation of B is injected\n    }\n\n    @Test\n    void test() {\n        when(cRepository.getSomething()).thenReturn(&quot;Hello&quot;);\n        String actual = a.getSomething();\n        assertEquals(&quot;Hello World!&quot;, actual);\n    }\n}\n</code></pre>\n<p>The interface between <strong>A</strong> and <strong>B</strong> could be freely changed in any direction.\nMuch more flexible approach.\nBut this does not mean that the interface of the <strong>B</strong> should always be fluent.\nAs soon as the API of class <strong>B</strong> is getting more mature (ready to be merged into mainline) it <em>might</em> make sense to\n“solidify” it by adding <strong>more</strong> unit tests.\nIf you're using a framework with a dependency injection mechanism, you probably can specify the set of dependencies to\ninclude in the test.<br>\nThis is how Spring does it:</p>\n<pre><code class=\"language-java\">\n    @ExtendWith(SpringExtension.class) // Enables Spring to take control over the test execution\n    @Import({A.class, B.class}) //classes that will be included into the test Spring Context\n    public class ATest {\n    \n        @Autowire\n        private A a; //A will be instantiated by Spring\n        //B will be injected automatically\n        @MockBean\n        private CRepository cRepository; //Mock of CRepository will be injected into B\n    \n        @Test\n        void test() {\n            when(cRepository.getSomething()).thenReturn(&quot;Hello&quot;);\n            String actual = a.getSomething();\n            assertEquals(&quot;Hello World!&quot;, actual);\n        }\n    }\n</code></pre>\n<p>But be careful, you're still locking quite a bit of components together.\nPlus, such tests are a bit slower than &quot;pure&quot; jUnit tests due to the Spring Context overhead.\nIt's not slower by much, but when we're talking about thousands and thousands of unit tests - every hundred milliseconds\ncount.</p>\n<h3>Avoid ArgumentMatchers</h3>\n<p>Avoid usage of <code>any()</code> or similar vague matchers.\nYou should have a pretty good idea of what the parameter is and can use a specific value instead.<br>\nAnd in case you don’t know, you can capture the actual parameter\nvia <a href=\"https://www.baeldung.com/mockito-argumentcaptor\">@ArgumentCaptors</a> and apply the usual assertions on it.</p>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">underTest.returningVoidIsABadPractice(veryCoolInputData); //calling a real method\n\nverify(mock).veryCoolMethodIWantToTest(any()); //WTH is tested here?\n</code></pre>\n<p>Extremely deceiving test creating a <em>fake</em> code coverage.\nBetter to have no test than this.\nHonestly.</p>\n<p><strong>Good:</strong></p>\n<pre><code class=\"language-java\">underTest.returningVoidIsABadPractice(veryCoolInputData); //calling a real method\n\nExpectedObjectType expectedObject = ExpectedObjectType.builder()\n                                                      .setId(123L)\n                                                      .build(); //indirectly tests setters!\n\nverify(mock).veryCoolMethodIWantToTest(expectedObject); //aaah, now it's clear\n</code></pre>\n<p>Best case scenario.\nObjects will be compared using <code>.equals(Object object)</code>.\nA much more flexible solution.\nIn case new fields are added to <code>ExpectedObjectType</code>, this test will automatically reveal all discrepancies\nin <code>underTest.returningVoidIsABadPractice(...)</code> implementation.\nIsn't this awesome?</p>\n<p><strong>or</strong></p>\n<pre><code class=\"language-java\">\n@Captor\nprivate ArgumentCaptor&lt;ExpectedObjectType&gt; expectedObjectCaptor;\n\nunderTest.returningVoidIsABadPractice(veryCoolInputData); //calling a real method\n\nverify(mock).veryCoolMethodIWantToTest(expectedObjectCaptor.capture());\nExpectedObjectType expectedObject = expectedObjectCaptor.getValue();\n\nasserEquals(123L,expectedObject.getId()); //indirectly testing getter!\n</code></pre>\n<p>Sometimes there’s no <code>.equals(Object object)</code>implementation (3rd party library).\nSo we have to compare objects field by field manually.\nLess flexible solution.</p>\n<p><strong>or</strong></p>\n<pre><code class=\"language-java\">underTest.returningVoidIsABadPractice(veryCoolInputData);\n\nverify(mock).veryCoolMethodIWantToTest(assertArg(expectedObject -&gt;{\n\nassertEquals(123L,expectedObject.getId());\n\nassertEquals(&quot;Object title&quot;,expectedObject.getTitle());\n        }));\n</code></pre>\n<p>Slicker and up-to-date replacement for ArgumentCaptor.\nAvailable since <a href=\"https://github.com/mockito/mockito/releases/tag/v5.3.0\">Mockito v5.3.0</a>.</p>\n<h3>Never couple unit tests</h3>\n<p>The execution order of tests is non-deterministic, they even might run in parallel.\nAvoid any sort of <code>static</code> constructions in your tests.</p>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">private static List&lt;String&gt; names = new ArrayList&lt;&gt;();\n\n\n@Test\nvoid testNamesEmpty() {\n    assertTrue(names.isEmpty());\n}\n\n@Test\nvoid testNamesNotEmpty() {\n    names.add(&quot;John Doe&quot;);\n    assertFalse(names.isEmpty());\n}\n\n</code></pre>\n<p>Variable <code>List&lt;String&gt; names</code> is shared between all tests.\nChanging the order of execution will change the output.\nAvoid like a plague.</p>\n<p><strong>Good</strong>:</p>\n<pre><code class=\"language-java\">private List&lt;String&gt; names = new ArrayList&lt;&gt;();\n\n@Test\nvoid testNamesEmpty() {\n    assertTrue(names.isEmpty());\n}\n\n@Test\nvoid testNamesNotEmpty() {\n    names.add(&quot;John Doe&quot;);\n    assertFalse(names.isEmpty());\n}\n</code></pre>\n<p>For each <code>@Test</code> new instance of a test class is created,\ntherefore instance variable <code>List&lt;String&gt; names</code> will not be shared.</p>\n<h3>Control the output of your tests</h3>\n<p><!-- raw HTML omitted -->Green<!-- raw HTML omitted --> test should produce no output.<br>\n<!-- raw HTML omitted -->Red<!-- raw HTML omitted --> test should produce just enough clear output.</p>\n<p><strong>Bad and absolutely useless log:</strong></p>\n<p><img src=\"assets/20240406-tg/image-20230329-074245.png\" alt=\"\"></p>\n<p>Good luck finding anything there.</p>\n<p><strong>Good(but not perfect, too much output from Maven) output of the failing test suite:</strong></p>\n<p><img src=\"assets/20240406-tg/image-20230329-074340.png\" alt=\"\"></p>\n<p>A simple browser search will reveal all the necessary information.</p>\n<h3>Eliminate everything that makes input and output unclear</h3>\n<ul>\n<li>\n<p>Never generate random input.</p>\n</li>\n<li>\n<p>Don’t use named constants from the production code.<br>\nWhat if there’s a type-o?<br>\nPrefer literal strings and numbers, even when it means duplication.</p>\n</li>\n</ul>\n<h3>Keep assertions simple</h3>\n<ul>\n<li>\n<p>Too many assertions make tests difficult to read, maintain and blur the overall picture</p>\n</li>\n<li>\n<p>Strive to have one <code>assert...</code> per test for maximum readability</p>\n</li>\n<li>\n<p>Avoid any sort of conditional logic or logic in general in your assertions.\nOtherwise, you’ll have to write tests to test your tests.</p>\n<p><strong>Bad:</strong></p>\n<pre><code class=\"language-java\">  assertEquals(&quot;Hello&quot;+expectedPersonName, actualGreeting);\n</code></pre>\n<p>Even the simplest logic, like string concatenation, can produce errors.\nHave you noticed the missing (space) after “Hello”?\nUsers will notice.<br>\n<strong>Good:</strong></p>\n<pre><code class=\"language-java\">  assertEquals(&quot;Hello John Doe&quot;,actualGreeting);\n</code></pre>\n<p>Leave no room for errors.\nAt least, in unit tests.</p>\n</li>\n<li>\n<p>Be mindful of what is actually going on behind <code>assertEquals()</code><br>\nIt is not the best suitable to test collections.\nUse <a href=\"https://assertj.github.io/doc/\">https://assertj.github.io/doc/</a> <code>.contains()</code>, <code>.containsExactly()</code>, <code>.containsExactlyInAnyOrder()</code>,\netc. instead.\nDon’t over-abuse AssertJ, as it leads to overly complex tests.\nUse simple standard assertions where possible.</p>\n<ul>\n<li>\n<p>Assertions should not be smart</p>\n</li>\n<li>\n<p><strong>Assertions should be simple</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Use <code>assertAll()</code> to see the whole picture.<br>\n<strong>Bad:</strong></p>\n<pre><code class=\"language-java\">assertEquals(123L, actual.getId());\nassertEquals(&quot;John&quot;, actualy.getName());\nassertEquals(&quot;Doe&quot;, actualy.getSurname());\n... //20 more asserts, awful\n</code></pre>\n<p>The first failed <code>assert...</code> will interrupt the test, and you will see only a part of the picture.<br>\n<strong>Good:</strong></p>\n<pre><code class=\"language-java\">assertAll(\n  ()-&gt;assertEquals(123L, actual.getId()),\n  ()-&gt;assertEquals(&quot;John&quot;, actualy.getName()),\n  ()-&gt;assertEquals(&quot;Doe&quot;, actualy.getSurname()),\n  ... //20 more asserts, still awful\n);\n</code></pre>\n<p><code>assertAll(...)</code> will run all executables(asserts) and produce a combined output.\nYou will see the full picture.\nAlthough the test itself is starting to look rather ugly.</p>\n</li>\n<li>\n<p>Use the assert message parameter to help future you understand what exactly is going on.<br>\n<code>assertEquals(expected.getId(), actual.getId(), &quot;User Id&quot;)</code> ← every <code>assert..</code> method has n+1 parameters.\nIt accepts not only a <code>String</code> but also a <code>Supplier&lt;String&gt;</code>.\nEven the simplest predefined message is much better than <code>AssertionFailedError: Expected 1 Actual 2</code>.\nGood luck deciphering that in three months.</p>\n</li>\n</ul>\n<p>You want your test to convey a story about what is going on with the system.\nJust enough to spot the issue when it occurs.</p>\n<h3>See your tests fail at least once</h3>\n<p>Make sure that your tests are actually testing something.\nYou should see your tests fail before they succeed.</p>\n<p>Be curious, change the production code, see your test fail, confirm the error, and fix it back.\nIt virtually takes no time, and comforts you during the production deployment.</p>\n<p>The earlier you write unit tests, the simpler this could be achieved.\nIt's tough to write failing unit tests for already written code.</p>\n<h3>Practice Parameterized Testing</h3>\n<p><a href=\"https://www.baeldung.com/parameterized-tests-junit-5\">Parameterized testing</a> is a technique used to run the same test method with different input parameters.\nThis helps reduce code duplication and ensures that the code works as expected with different inputs.\nPractice parameterized testing to improve the efficiency of tests and increase test coverage.</p>\n<p>Testing validation rules?\nParametrized test probably is a good idea.</p>\n<h3>Use Architectural Testing</h3>\n<p><a href=\"https://www.archunit.org/\">Architectural testing</a> is a technique used to verify that the code follows certain architectural rules and constraints.\nIt should be used to ensure that the code is scalable, maintainable, and follows best practices.</p>\n<p>Architectural tests are extremely useful for preserving(or forcing) project structure.</p>\n<p>For example:</p>\n<ul>\n<li>\n<p>prevent accessing classes in a certain package from another class in another package\n(a.k.a. don't inject repository into the controller)</p>\n</li>\n<li>\n<p>forbid accessing internal implementation of the module directly, and force usage of the API layer</p>\n</li>\n</ul>\n<p>Overall, architectural tests should be quite deep in your toolbox.\nDon’t just wave it left and right.</p>\n<h3>Avoid fake test coverage</h3>\n<ul>\n<li>\n<p>Test coverage is a useful metric that can help <strong>identify</strong> untested code paths</p>\n</li>\n<li>\n<p>Test coverage is <strong>just a metric</strong>, and <strong>should not</strong> be the sole purpose of writing tests</p>\n</li>\n<li>\n<p>Writing tests solely to increase test coverage can lead to dangerous <strong>fake</strong> and <strong>meaningless</strong> coverage, where\ntests are written to simply execute the code paths with no actually asserting or verifying results</p>\n</li>\n<li>\n<p>Fake coverage leads to a <strong>false</strong> sense of security, where developers think they have thoroughly tested their code\nwhen in reality they are not</p>\n</li>\n<li>\n<p>Using tools like Sonar or other static code analyzers <strong>can help</strong> identify missed execution paths, but they <strong>should\nnot</strong> be used to enforce writing tests for the sake of coverage</p>\n</li>\n<li>\n<p>Focus on writing tests that <strong>actually</strong> <strong>test</strong> functionality and ensure that code is working as expected,\nrather than just trying to increase test coverage</p>\n</li>\n<li>\n<p>Good test coverage alone <strong>does not</strong> guarantee the quality or correctness of code</p>\n</li>\n<li>\n<p><strong>It is better to have no test coverage than a fake one.</strong>\nWith no coverage, at least, there is an incentive to write tests</p>\n</li>\n</ul>\n<h3>How to identify “fake” tests?</h3>\n<ul>\n<li>\n<p>Try to break the test — if the only way to break the test is to delete some lines of code, it might be a fake\ntest</p>\n</li>\n<li>\n<p>Vague argument matchers - screams fake</p>\n</li>\n<li>\n<p>Messy overly complex tests — there’s a high probability that some coverage is fake</p>\n</li>\n<li>\n<p>Tests without any meaningful assertions or verifications - 100% fake</p>\n</li>\n<li>\n<p>Tests that test getters and setters — it’s not fake, but a horrible way to increase the test coverage</p>\n</li>\n<li>\n<p>Tests that do not follow this testing guideline — most certainly fake 😉.</p>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li>\n<p><a href=\"https://www.baeldung.com/java-unit-testing-best-practices\">https://www.baeldung.com/java-unit-testing-best-practices</a></p>\n</li>\n<li>\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/\">https://junit.org/junit5/docs/current/user-guide/</a></p>\n</li>\n<li>\n<p><a href=\"https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/\">https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.baeldung.com/mockito-argumentcaptor\">https://www.baeldung.com/mockito-argumentcaptor</a></p>\n</li>\n<li>\n<p><a href=\"http://jmock.org/oopsla2004.pdf\">Mock Roles, not Objects</a></p>\n</li>\n<li>\n<p><a href=\"https://assertj.github.io/doc/\">https://assertj.github.io/doc/</a></p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Mutation_testing\">https://en.wikipedia.org/wiki/Mutation_testing</a></p>\n</li>\n<li>\n<p><a href=\"https://www.baeldung.com/parameterized-tests-junit-5\">Parameterized Tests with JUnit 5</a></p>\n</li>\n<li>\n<p><a href=\"https://www.archunit.org/\">ArchUnit</a></p>\n</li>\n</ul>\n<h1>Follow Extreme Programming Practices</h1>\n<p>Extreme Programming (XP) is an agile software development methodology that emphasizes testing as a core practice:</p>\n<h3>Continuous Integration</h3>\n<p>Integrate your code into the mainline frequently, and avoid branching for too long.</p>\n<p>Thankfully, this practice is adopted quite well these days.</p>\n<h3>Pair Programming</h3>\n<p>If something is even 1% over your comfort zone - ask for help.</p>\n<p>I can't stress enough the importance of pair programming.\nI pity the teams and organizations that see this as a &quot;waste of time.&quot;</p>\n<p>Two heads are better than one.</p>\n<h3>Continuous refactoring</h3>\n<p>Don’t ever push code unless it is worthy to be added to your CV.</p>\n<p>Let me quote Kent Beck here:</p>\n<blockquote>\n<p><strong>For each desired change, make the change easy (warning: this may be hard), then make the easy change</strong></p>\n</blockquote>\n<h3>Test-first</h3>\n<p>Don’t ever put code in visible sight unless it has a reasonably good unit test suite.</p>\n<p>Nothing screams &quot;mess&quot; louder than &quot;I finished the development, now I will write some tests.&quot;</p>\n<h3>References</h3>\n<ul>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Extreme_programming\">Extreme Programming</a></p>\n</li>\n<li>\n<p><a href=\"https://amzn.eu/d/4riNe3l\">https://amzn.eu/d/4riNe3l</a></p>\n</li>\n</ul>\n<h1>Test microservices effectively</h1>\n<p><img src=\"assets/20240406-tg/image-20230327-134922.png\" alt=\"\"></p>\n<p>There's a reason why I labeled the test pyramid at the beginning of the article as &quot;classic.&quot;\nI wanted to avoid &quot;monolithic.&quot;\nBut it's true, the classic test pyramid was introduced in times of monoliths.\nBig monoliths.\nWith millions and millions of lines of code.</p>\n<p>In the world of microservices, this pyramid evolved.\nIt's no longer even a pyramid.\nIt's evolved into what's called <a href=\"https://engineering.atspotify.com/2018/01/testing-of-microservices/\">Honeycomb Testing Strategy</a>,\nwhich shifts the focus from internal implementation to external integrations,\nhence it suggests a higher quantity of integration tests with unit tests sprinkled on top.</p>\n<h3>Honeycomb Testing Strategy</h3>\n<p><img src=\"assets/20240406-tg/image-20230327-120207.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>Write a lot of integration tests and write them early</p>\n</li>\n<li>\n<p>“Attack” complex isolated parts with unit tests</p>\n</li>\n<li>\n<p>Sprinkle some system e2e tests on top</p>\n</li>\n</ul>\n<h3>Test the entire microservice in isolation</h3>\n<p>Use <a href=\"https://wiremock.org/\">https://wiremock.org/</a>/<a href=\"https://www.mock-server.com/\">https://www.mock-server.com/</a>\nand <a href=\"https://www.testcontainers.org/\">https://www.testcontainers.org/</a> to mock/emulate <strong>all</strong> external dependencies</p>\n<h3>Start the entire service <em><strong>without internal Mocks</strong></em></h3>\n<ul>\n<li>\n<p>Reuse the test setup as much as possible by introducing the base test class with all\nthe necessary fixtures to start the service.</p>\n</li>\n<li>\n<p>Be careful about shared stateful parts, like DB, Kafka, RabbitMQ, etc.\nClean them <strong>before and after</strong> if necessary.<br>\nPro tip: cleaning state BEFORE the test provides you with a better debugging experience.</p>\n</li>\n</ul>\n<h3>Test as many end-to-end flows in your system as possible</h3>\n<p>In order of importance:</p>\n<ol>\n<li>\n<p>Test the service as a whole via its interfaces — REST, Async, etc.\nTreat your service as a black box.</p>\n</li>\n<li>\n<p>Afterward, test integrations (like DB, 3rd party services, S3, etc) in isolation if necessary.</p>\n</li>\n</ol>\n<h3>Use unit tests to cover the parts of the code naturally isolated with high internal complexity</h3>\n<p>Mocks are allowed.</p>\n<h3>Run integration tests separately from unit tests</h3>\n<p>Use the <a href=\"https://maven.apache.org/surefire/maven-failsafe-plugin/\">maven failsafe plugin</a> or similar to separate slow\nintegration tests from blazing-fast unit tests in your CI/CD pipeline.</p>\n<p>Your goal should be to receive as much feedback as quickly as possible.</p>\n<h3>There's no reason for a backend to have bugs</h3>\n<p>This is a little bit wild, but I believe that there is no reason for a modern backend service to have technical bugs.\nI'm not talking about bloody monoliths written in the past century.\nI'm talking about something a little bit more modern.\nLet's say written in the past 3 years.\nThere are no logical reasons to have bugs there.</p>\n<p>There might be some discrepancies due to product misunderstanding and such.\nBut everything else signals a high level of unprofessionalism from the engineers who build it.</p>\n<h3>References</h3>\n<ul>\n<li>\n<p><a href=\"https://engineering.atspotify.com/2018/01/testing-of-microservices/\">https://engineering.atspotify.com/2018/01/testing-of-microservices/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.testcontainers.org/\">https://www.testcontainers.org/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=0kXEwo0XFaY\">https://www.youtube.com/watch?v=0kXEwo0XFaY</a></p>\n</li>\n<li>\n<p><a href=\"https://wiremock.org/\">https://wiremock.org/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.mock-server.com/\">https://www.mock-server.com/</a></p>\n</li>\n<li>\n<p><a href=\"https://maven.apache.org/surefire/maven-failsafe-plugin/\">https://maven.apache.org/surefire/maven-failsafe-plugin/</a></p>\n</li>\n</ul>\n<h1>Other materials</h1>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=1Z_h55jMe-M\">https://www.youtube.com/watch?v=1Z_h55jMe-M</a> - must watch, if you’re\nnot familiar with Victor Rentea - welcome to the club, buddy</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=fr1E9aVnBxw\">https://www.youtube.com/watch?v=fr1E9aVnBxw</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=F8Gc8Nwf0yk\">https://www.youtube.com/watch?v=F8Gc8Nwf0yk</a></p>\n</li>\n<li>\n<p><a href=\"https://amzn.eu/d/bLybGSN\">https://amzn.eu/d/bLybGSN</a> - absolute classic, must-read, testing covered in Chapter 9</p>\n</li>\n<li>\n<p><a href=\"https://amzn.eu/d/48lnk1H\">https://amzn.eu/d/48lnk1H</a> - amazing book by one and only Martin Fowler. Must read.</p>\n</li>\n</ul>\n<p>…to be continued</p>\n",
    "date": "16.05.2024",
    "title": "Ultimate Testing Guideline",
    "anchor": "ultimate-testing-guideline"
  },
  {
    "filename": "20240412-circular-dependencies.md",
    "content": "<blockquote>\n<p>&quot;I knew you'd say that&quot; - Judge Dredd</p>\n</blockquote>\n<p>After\npublishing <a href=\"https://www.buyallmemes.com/#practical-dependency-inversion-principle\">Practical Dependency Inversion Principle</a>\narticle, I received amazing feedback from one of my dear colleagues.</p>\n<p>It was in the form of a question:</p>\n<blockquote>\n<p>...there is another problem, the cross-dependency between modules/packages.</p>\n<p>What are your thoughts on this?</p>\n</blockquote>\n<p>The question was premised on the schema that looks like this:</p>\n<p><img src=\"assets/20240412-cd/img_1.png\" alt=\"img_1.png\"></p>\n<p>With code structure like this:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── notification\n│   │   ├── NotificationUser.java\n│   │   ├── NotificationUserRetriever.java\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   ├── UserModule.java\n│   │   ├── UserNotificationRetriever.java\n│   │   └── UserNotification.java\n\n</code></pre>\n<p>Where <code>NotificationModule</code> implements <code>UserNotificationRetriever</code> and <code>UserModule</code>\nimplements <code>NotificationUserRetriever</code>.</p>\n<p>It's not that hard to imagine:</p>\n<ul>\n<li><code>NotificationModule</code> wants to know something about a user, and the dependency on <code>UserModule</code> is inverted, exactly as\nit should be</li>\n<li><code>UserModule</code> needs something from <code>NotificationModule</code>, and the dependency is also inverted</li>\n</ul>\n<p>This is what's called <strong>Circular Dependency</strong>.</p>\n<p>And it's extremely problematic.\nDependency Inversion ultimately plays no role here,\neven with direct uninverted dependencies such a case can occur,\nand the Dependency Inversion Principle by itself cannot fix it.\nSome frameworks (like Spring) and build tools (like Maven) will produce an error in case even a single\ncircular dependency is detected.\nThe main reason is — it's just too dangerous to resolve.\nIt's a recursion.\nUnless treated with care it can produce such nice things like <code>out-of-memory</code>, <code>stackoverflow</code>, etc.</p>\n<p>But, more than anything, it reveals the fundamental flaw in the system design.</p>\n<p>In this article, I'm going to share some tips-and-tricks on how to treat circular dependencies.\nAnd I'm going to start with the most radical one.</p>\n<h2>Tactical Merge</h2>\n<p>Yes, I know.\nYou are your colleagues spent weeks and months trying to separate <code>UserModule</code> and <code>NotificationModule</code>.\nYou might have even extracted them into systems separated by the network to enforce sacred <em>domain boundaries</em>.\nAnd now I'm suggesting to move everything back together into a single <code>SpaghettiModule</code>?\nHell no!</p>\n<p>Hear me out.\nThe software is supposed to be... soft.\nFlexible.\nLike clay.\nThe purpose of the software is to help businesses achieve their needs.\nIf the software is designed in a way that does not allow developers to build certain features effectively -\nthe design is a massive failure.\nAt the end of the day, most product companies are <strong>not</strong> selling their software directly,\nbut rather via a service that software implements a.k.a. SaaS.\nI think we can agree on that.</p>\n<p>For example, do you care about the system design behind a <em>google.com</em>?\nIf you're a nerd, maybe.\nA regular person cannot care less about the underlying software.\nBut everyone cares about this software working.\nEveryone.</p>\n<p>So yeah, if <code>UserModule</code> and <code>NotificationModule</code> want to be together,\nbecause business requirements want so, it's probably a good idea to consider merging them,\nand reshaping into a single domain.\nDon't feel overprotected by existing boundaries.\nSometimes mistakes are made, and the worst thing we as engineers can do is to be stubborn about it.</p>\n<p>It's a very humbling experience.\nYou should try it.</p>\n<h2>One direction</h2>\n<p>A less radical,\nbut a bit more political approach is to invert dependency only from one module to another,\nand leave the direct dependency from another module back.</p>\n<p>For example, we decide that <code>NotificationModule</code> is the high-level module,\nand <code>UserModule</code> is... well, further from the core of the business logic.\nThis is where the political card has to be played\nbecause the team that manages <code>UserModule</code> might not agree on doubling down on <code>NotificationModule</code> dependency:</p>\n<p><img src=\"assets/20240412-cd/img.png\" alt=\"img.png\"></p>\n<p>With the code structure like this:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── notification\n│   │   ├── NotificationUser.java\n│   │   ├── NotificationUserRetriever.java\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   ├── UserModule.java\n</code></pre>\n<p>And so there we have it.\n<code>UserModule</code> directly depends on <code>NotificationModule</code>,\nand there's an inverted dependency from <code>UserModule</code> to <code>NotificationModule</code>.\nThe dependency cycle no longer exists.\nAt least, during build time.\nThere's still the possibility of an infinite loop during a <strong>runtime</strong>:</p>\n<ul>\n<li><code>NotificationModule</code> invokes a <code>NotificationUserRetriever</code> interface that's implemented within <code>UserModule</code></li>\n<li>To implement <code>NotificationUserRetriever</code> <code>UserModule</code> needs something from <code>NotificationModule</code> and so it calls it\ndirectly</li>\n</ul>\n<p>This is more like a hack or remedying the symptoms.\nThe disease is still there.\nModules are still tightly coupled.\nDomain boundaries are wrong.\nWe just tricked the system.</p>\n<p>To solve this problem once and for all, one of the dependencies has to be broken.\nThe best-case scenario is that both of them no longer exist.</p>\n<p>However, there are ways to break circular dependencies via some integration patterns.\n<strong>Queue</strong> is the first thing that comes to my mind.\nIs it possible to eliminate the dependencies altogether by listening to a message queue?\nOr maybe something a bit more robust, like a Kafka topic?\nSounds great!\nDon't.\nIt's even more dangerous.</p>\n<p>Let's go through a &quot;hypothetical&quot; example:</p>\n<ul>\n<li><code>NotificationModule</code> receives a request from out there, and after fulfilling the request, it emits an event\nto <code>UserModule</code></li>\n<li><code>UserModule</code> receives an event, performs some computation, updates some user data... and sends an event\nto <code>NotificationModule</code></li>\n<li>But, unfortunately, when <code>NotificationModule</code> receives an event, and after performing some computation, it decides to\nnotify <code>UserModule</code> via event</li>\n</ul>\n<p>You can see where it's going.\nThe system ends up in an asynchronous loop of events exchange that never terminates.\nIt might go for days and weeks unnoticed.\nUntil, eventually, with more and more requests triggering infinite loops,\nthe whole system will grind to a halt and go OOM.</p>\n<p>Been there. Done that.</p>\n<h2>Extract new module</h2>\n<p>This is a tricky one because it's very easy to get it wrong and make things worse.</p>\n<p>The approach is to extract functionalities that produce circular dependencies into a new even more high-level module.\nAnd invert the dependency from it.</p>\n<p><img src=\"assets/20240412-cd/img_2.png\" alt=\"img_2.png\"></p>\n<p>The code structure:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── aggregator\n│   │   ├── AggregatorUser.java\n│   │   ├── AggregatorUserRetriever.java\n│   │   │  \n│   │   ├── AggregatorNotification.java\n│   │   ├── AggregatorNotificationRetriever.java\n│   │   │\n│   │   └── AggregatorModule.java\n│   ├── notification\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   └── UserModule.java\n\n</code></pre>\n<p>We're demoting <code>UserModule</code> and <code>NotificationModule</code> to a lower level of abstraction,\nand introducing a new higher level <code>AggregatorModule</code> (naming is hard).</p>\n<p>So that <code>NotificationModule</code> depends on <code>AggregatorModule</code>, and <code>UserModule</code> depends on <code>AggregatorModule</code>.\nThe nuance here is that <code>AggregatorModule</code> now exposes two interfaces,\nbut <code>NotificationModule</code> and <code>UserModule</code> can cover only one of those each,\nso the setup requires more attention.</p>\n<p>There are whole lots of tricks that could be applied to handle such a case:\nfrom something like a combination of <code>@ConditionOnMissingBean(...)</code> and <code>@Primary</code> bean annotations\nif we're talking about Spring Framework,\nto something as simple as the default interface method.\nAnd if you feel like there might be more modules\nto depend on <code>AggregatorModule</code> it might be a good idea to introduce a generic aggregator interface.\nThis is where the real engineering begins.</p>\n<p>This approach seems like a quite straightforward one.\nWhat's easy to get wrong here?\nI'm glad you asked.\nAnd the answer is simple — direction of dependency inversion.\nIt might sound like a brilliant idea to introduce <code>AggregatorModule</code> and to make it depend on\nboth <code>UserModule</code> and <code>NotificationModule</code>:</p>\n<p><img src=\"assets/20240412-cd/img_3.png\" alt=\"img_3.png\"></p>\n<p>With code structure like this:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── aggregator\n│   │   └── AggregatorModule.java\n│   ├── notification\n│   │   ├── NotificationUser.java\n│   │   ├── NotificationUserRetriever.java\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   ├── UserModule.java\n│   │   ├── UserNotificationRetriever.java\n│   │   └── UserNotification.java\n\n</code></pre>\n<p><code>AggregatorModule</code> implements both interfaces.\n<code>UserModule</code> and <code>NotificationModule</code> no longer know about each other.\nSounds great!\nExcept it's not.</p>\n<p>Where <code>AggregatorModule</code> will get the information to implement <code>NotificationUserRetriever</code> for example?\nFrom <code>UserModule</code> of course.\nAnd what about <code>UserNotificationRetriever</code>, how to implement it?\nInvoke <code>NotificationModule</code>.</p>\n<p>So the more realistic dependency schema should look like this:</p>\n<p><img src=\"assets/20240412-cd/img_4.png\" alt=\"img_4.png\"></p>\n<p>So instead of one circular dependency between <code>UserModule</code> and <code>NotificationModule</code>,\nthere are two, and they are even more distributed!\nAnd, the best way to solve a problem is to distribute it.\nCOVID? Anyone?</p>\n<p>So yeah, be careful.\nIn this case, inversion of dependency could do more harm than good.</p>\n<p>And this is exactly why I started with the <a href=\"#tactical-merge\">Tactical Merge</a>.\nAlthough it seems like the most extreme, it guarantees to work.\nThe presence of circular dependency signals a fundamental issue with the design,\nand addressing it only partially might provide temporary relief but won't offer lasting fix.</p>\n",
    "date": "15.04.2024",
    "title": "Circular dependencies",
    "anchor": "circular-dependencies"
  },
  {
    "filename": "20240404-practical-dependency-inversion-principle.md",
    "content": "<p>Dependency Inversion Principle (DIP) comes from the famous <strong>SOLID</strong> principles, coined by Uncle Bob back in the 90s.</p>\n<ul>\n<li><strong>S</strong>ingle Responsibility Principle</li>\n<li><strong>O</strong>pen-Close Principle</li>\n<li><strong>L</strong>iskov Substitution Principle</li>\n<li><strong>I</strong>nterface Segregation Principle</li>\n<li><strong>D</strong>ependency Inversion Principle</li>\n</ul>\n<h6>Food for the thought: Why are these principles bundled into SOLID, and not spread individually?</h6>\n<p>Most developers have heard or read something about them to some extent.\nFrom my experience, most devs (myself included) stop after <strong>SO</strong>, leaving <strong>LID</strong> for later days, because they are\nconfusing.</p>\n<ul>\n<li>Who the hell is Liskov? And whom she's substituting?</li>\n<li>Why do we need to segregate anything — isn't it a bad thing these days?</li>\n<li>And which dependencies should we invert and how? And what about dependency injection?</li>\n</ul>\n<p>In this article, I'm going to shed some light on the <strong>Dependency Inversion Principle</strong>, since it's the\nmost impactful and addicting, in my opinion.\nOnce I've started inverting the dependencies in my systems, I can't imagine living without it anymore.</p>\n<h2>Naming things</h2>\n<blockquote>\n<p>There are only two hard things in Computer Science: cache invalidation and naming things.</p>\n</blockquote>\n<p>So let's deconstruct the name: <strong><em>dependency inversion</em></strong></p>\n<h3>Dependency</h3>\n<p>Having a dependency implies that we have at least two of <em>something</em>,\nand there's a <em>dependency</em> between these <em>somethings</em>.\nWhat is <em>something</em>? It could be anything really; the only restriction is that this <em>something</em> is somehow bound by\nits context.\nIt might be a single class, a package, a component, a group of packages, a module, or even a standalone\nweb service.\nFor example, code that calls the database to fetch a user. There are many possible names for such a thing: domain,\nmodule, component, package, service, etc.\nName is unimportant, as long as it's consistent throughout the discussion.\nI'll call it a <strong>module</strong>.\nA module that queries a user from somewhere (presumably DB) - the <code>UserModule</code>.\nThat's the first.\nBut we need one more.\nLet's say we want to send a user notification because an appointment with a doctor is confirmed.\nAnd here we have our second module — the <code>NotificationModule</code>.</p>\n<p>The code might look something like this:</p>\n<pre><code class=\"language-java\">package test.notification;\n\nimport test.user.UserModule;\nimport test.user.User;\n\npublic class NotificationModule {\n\n    private final UserModule userModule;\n\n    public NotificationModule(UserModule userModule) {\n        this.userModule = userModule;\n    }\n\n    public void sendNotification(long userId) {\n        userModule.findUserById(userId)\n                  .ifPresent(this::sendNotification);\n    }\n\n    private void sendNotification(User user) {\n        // notification logic\n    }\n}\n\n</code></pre>\n<pre><code class=\"language-java\">package test.user;\n\npublic class UserModule {\n\n    public Optinal&lt;User&gt; findUserById(long id) {\n        //fetching user from the DB\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package test.user;\n\npublic class User {\n    private String name;\n    private String surname;\n    private String email;\n    //50 more attributes, because why not\n}\n\n</code></pre>\n<p>Folder structure:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── notification\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   ├── UserModule.java\n│   │   └── User.java\n\n</code></pre>\n<p>According to the code <strong>NotificationModule</strong> <em>depends on</em> <strong>UserModule</strong>.</p>\n<p>Such code could be found <strong>everywhere</strong>.\nI would go as far as to say that 99% of the code I've read(and written) looks like this.\nAnd it might seem that there's nothing wrong with it.\nIn the end, it works, it is straightforward to read and easy to understand.\nBut there's a problem.\nOur sacred logic of managing notifications is polluted with something we don't have control over.\nNotice, that <code>UserModule</code> resides in a different package than <code>NotificationModule</code>.\nIt's not a part of the notification domain.\nIt's a domain on its own.</p>\n<p>From the perspective of the <code>NotificationModule</code>, the <code>UserModule</code> is a low-level implementation detail.\nAnd this detail is leaking more and more into the module that depends on it.\nSee the <code>User</code> class?\nIt's part of the <code>UserModule</code>, not the <code>NotificationModule</code>.\nAnd <code>NotificationModule</code> is just one of its clients.\nObviously <code>UserModule</code> is used throughout the system.\nIt's the most used module in the whole system.\nEverything depends on it!</p>\n<p>But wait.\nWhy would <code>NotificationModule</code> care about where the user is coming from?\nIt just needs some of the user data, and that's it.\nThe concept of the user is important, but not where it comes from.\nAnd what if a <code>User</code> object is large, but we need only a few fields from it?\nShould the new <code>SmallUser</code> object be introduced near the <code>UserModule</code>?\nIsn't this a circular dependency then?\n<code>NotificationModule</code> depends on <code>UserModule</code> in code, but <code>UserModule</code> depends on <code>NotificationModule</code> indirectly\nlogically?\nIt's not hard to imagine how this goes out of hand.\nI've seen it go out of hand.\nEvery.\nSingle.\nTime.\nI've seen with my own eyes systems being tied into knots by such modules.\nAnd months and months of refactoring spent just to be reverted with &quot;It's too much.\nToo expensive.\nNot worth it.&quot;\ncomments.\nI wrote such systems.</p>\n<p>The root of the problem lies in the dependency <strong>direction</strong>.\n<strong>High-level</strong> <code>NotificationModule</code> depends on <strong>low-level</strong> <code>UserModule</code>.\nLevel in this case means the level of abstraction.\nThe further we go from the edge(domain boundary) of the system — the higher we go in terms of abstraction.\nFor example, modules that talk to DB are on the edge of the system (the scary network),\nso as modules that send HTTP calls, talk to message brokers, etc.\nHowever, the modules that prepare notification messages are much further from the edge of the system,\nso the level of abstraction is higher.\nIt's a relative term.\nLike Java is categorized as a high-level programming language,\nbased on its proximity to the bare metal,\nin relation to something like Assembly language which is the lowest of them all.</p>\n<p>And so the dependency tree might look something like this:</p>\n<p><img src=\"assets/20240406-pdip/pre_inversion.png\" alt=\"before inversion\"></p>\n<p>Dependency direction goes with the direction of an arrow.\nEverything directly or transitively depends on <code>UserModule</code>.\nThe core of the system is not the business logic, but the module that retrieves a user from the DB.\nThis is fundamentally wrong.\nWe want the business logic to drive our system, not the <em>I-know-how-to-talk-to-a-database</em>-thingy.</p>\n<h3>Inversion</h3>\n<p>This is pretty much self-explanatory, or so it seems.\nGoogle tells me that inversion is a result of being inverted.\nThank you, Google.\nAnd the verb <code>invert</code> means <code>put upside down or in the opposite position, order, or arrangement</code>.\nThere it goes, putting upside down the dependency, so that it's no longer A-&gt;B, but A&lt;-B.\nBut how to achieve this?\nWe don't want <code>UserModule</code> to call <code>NotificationModule</code> to send notifications about appointment bookings, it makes no\nsense.\nWhat we actually want to do, is to make <code>UserModule</code> depend on <code>NotificationModule</code>, but not interact with it.</p>\n<h3>How?</h3>\n<blockquote>\n<p>Are you watching closely?</p>\n</blockquote>\n<p>Interfaces.\nTake your time and look through the refactored code:</p>\n<pre><code class=\"language-java\">package test.notification;\n\npublic class NotificationModule {\n\n    private final NotificationUserRetriever userRetriever;\n\n    public NotificationModule(NotificationUserRetriever userRetriever) {\n        this.userRetriever = userRetriever;\n    }\n\n    public void sendNotification(long userId) {\n        userRetriever.findUserById(userId)\n                     .ifPresent(this::sendNotification);\n    }\n\n    private void sendNotification(NotificationUser user) {\n        // notification logic\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\">package test.notification;\n\npublic interface NotificationUserRetriever {\n    Optional&lt;NotificationUser&gt; findByUserId(long id);\n}\n</code></pre>\n<pre><code class=\"language-java\">package test.notification;\n\npublic record NotificationUser(String name, String surname, String email) {\n}\n</code></pre>\n<pre><code class=\"language-java\">package test.user;\n\nimport test.notification.NotificationUserRetriever;\nimport test.notification.NotificationUser;\n\npublic class UserModule implements NotificationUserRetriever {\n    public Optinal&lt;NotificationUser&gt; findUserById(long id) {\n        //fetching user from the DB\n        //and maps it to NotificationUser\n    }\n}\n</code></pre>\n<p>Folder structure:</p>\n<pre><code class=\"language-bash\">├── test\n│   ├── notification\n│   │   ├── NotificationUser.java\n│   │   ├── NotificationUserRetriever.java\n│   │   └── NotificationModule.java\n│   ├── user\n│   │   └──  UserModule.java\n\n</code></pre>\n<p>There is a huge fundamental difference.\n<code>NotificationModule</code> no longer depends on <code>UserModule</code>.\nThere's not a single <code>import</code> statement from <code>test.notification</code> that points to the <code>test.user</code> package.\nNot a single one.\n<code>NotificationModule</code> knows nothing about the existence of <code>UserModule</code>.\n<code>NotificationModule</code> is <strong>decoupled</strong> from <code>UserModule</code>, but not the other way around.\nIt just asks the universe(system) for a <code>NotificationUser</code> using its own declared interface <code>NotificationUserRetriever</code>.\nAnd the universe(<code>UserModule</code>) answers.\nThis is its job.\nThis is what this module does.\nIt abstracts the database on behalf of other modules.</p>\n<p>And so the direction of the dependency between <code>NotificationModule</code> and <code>UserModule</code> is inverted.\nGiven that we apply the inversion to all dependencies;\nthe dependency tree might look like this:\n<img src=\"assets/20240406-pdip/post_inversion.png\" alt=\"after inversion\"></p>\n<p>Not only does the system no longer directly depend on <code>UserModule</code>.\nBut the transitive dependencies are also much more relaxed.</p>\n<p>What if <code>UserModule</code> grows out of hand?\nWe can re-implement some interfaces in another <code>NewUserModule</code> without affecting anything.\nThere's no god <code>User</code> object to grow out of hand.\nInstead, there are several domain-specific representations of a user,\nwhich have no dependencies between each other whatsoever.</p>\n<p>But every decision is not without tradeoffs.\nIn the case of dependency inversion, the tradeoff is the amount of code.\nIf every module that wants to retrieve a user introduces its user model and an interface to support it,\n<code>UserModule</code> will grow pretty quickly.\nAnd most of the code will just map a database object into yet another domain object.\nIt's not the most exciting code to write or to test.\n<code>UserModule</code> is no longer treated as the module, which everyone has to bow to and respect,\nbut rather the mere mortal boring worker.\nAnd it works.\nBut as I've mentioned before,\nnothing stops the refactoring of <code>UserModule</code> into several smaller more exciting modules,\neach implementing its interface and fetching only what's necessary from the DB.\nAnd some of them might talk to something else, like a cache, another service, go for another DB table, etc.</p>\n<h2>One more thing</h2>\n<p>The Dependency Inversion Principle scales far beyond a couple of simple modules.\nIt's extremely powerful and addicting.\nBut it's important to know where to stop.\nSome literature states that everything should be abstracted and inverted.\nIncluding frameworks.\nI think this is an overkill.\nAbstracting the DB engine and inverting the dependency on it is a good idea.\nRunning around abstracting the framework of your choice, because someone from the internet says so, is not the smartest\nidea.\nIt's a waste of time.\nFor example, Spring Framework (so as pretty much every web framework nowadays) provides amazing capabilities of DI\n(dependency injection, not inversion)\nthat enable performing Dependency Inversion almost effortlessly.\nAlmost.</p>\n<p>It requires practice though.\nQuite a bit of practice.\nAnd it feels weird at first.\nBecause we're so used to envisioning systems as <code>three-tiered</code> which goes from top to bottom or from left to right —\nA-&gt;B-&gt;C.\nIn reality, systems are more like a graph, where dependencies are pointing inwards to the business logic — A-&gt;B&lt;-C.</p>\n<p>You guessed it right: Clean Architecture, Onion Architecture,\nHexagonal Architecture and such are ALL based heavily on the Dependency Inversion Principle.\nThese are different implementations of DIP.\nBut before you step into one of those architectures and claim yourself an ambassador,\nI would suggest stepping back and practicing DIP on a smaller scale.</p>\n<h2>Refactoring</h2>\n<p>Last but not least.\nDependency inversion is an amazing refactoring tool.\nAnd it doesn't get enough credit for it.</p>\n<p>Let's imagine, the system is not a greenfield.\nLet's imagine, the system is 7+ years old.\nThe <code>UserModule</code> from above now contains several dozens of public methods and has a dozen other dependencies.\nThe <code>User</code> object contains about 50 fields.\nHalf of them are weirdly named booleans.\nThere are quite a few complex relationships.</p>\n<p>And here we are, building a brand-new notification system.\nAnd we need some information about the user.\nAbout three-four fields.</p>\n<p>We have two options, and two options only:</p>\n<ol>\n<li>\n<p><code>NotificationModule</code> depends on <code>UserModule</code>.\nWe reuse one of the existing public methods from <code>UserModule</code> to fetch a <code>User</code> object.\nThen we perform all the necessary transformations on a user within the <code>NotificationModule</code>,\nand that's it.\nThe job's done.</p>\n<p>But we're added to the mess.\n<code>UserModule</code> now is a bit harder to refactor, because there's one more dependency on it.\n<code>NotificationModule</code> now also is not that new.\nIt's referencing a huge <code>User</code> object left right and center.\nIt's now the part of the ship.\nMaybe you would like to introduce yet another method to <code>UserModule</code> that returns a smaller user?\nAnd now there's even more mess.</p>\n<p>How do you think those several dozens of public methods were added?\nExactly like that.</p>\n</li>\n<li>\n<p>Inverse dependency.\nWe are not going to allow mess into our new <code>NotificationModule</code> by any means necessary.\nOur new module is too innocent to witness the monstrosity <code>UserModule</code> has become.\nInstead of depending on a mess, we're going to inverse the dependency and make the mess depend on our new\nslick domain-specific interface.\nThe mess is still there, but we're not adding to it, which by definition means that we're reducing it.\nAt least, within our new <code>NotificationModule</code>.\nAnd when someone eventually decides to refactor <code>UserModule</code>, all they need to do is keep the interface\nimplemented.\nNot the several dozens of public methods with unknown origins introduced within the last 7+ years.\nBut a single interface that leaves within <code>NotificationModule</code> domain.</p>\n</li>\n</ol>\n<p>I don't know about you, but for me <code>reducing the mess</code> beats <code>adding to the mess</code> any day.</p>\n",
    "date": "04.04.2024",
    "title": "Practical Dependency Inversion Principle",
    "anchor": "practical-dependency-inversion-principle"
  },
  {
    "filename": "20240331-lets-build.md",
    "content": "<p>So, the tech.</p>\n<p>Oh yes, the most important part — the tech.\nI'm going to use stuff I'm most comfortable with, which happens to be the most widespread tech stack in the world:\nAngular frontend, Java + String backend, and all that on top of AWS.</p>\n<p>Let's begin with infrastructure — to keep things simple, I'm using AWS Amplify to run frontend, and AWS AppRunner to run\nbackend.\nFor now, there's no need for anything more complex than this.</p>\n<h3>AWS Amplify</h3>\n<p>I'm not the frontend expert by any means, but even I know, that FE is mostly static stuff.\nAnd the best way to serve static stuff is via S3.\nThe problem is — I don't want to spend time configuring all that now.\nS3 Bucket policy, pipelines, roles — I can configure all of that, but why?</p>\n<p>This is where the Serverless shines.\n<a href=\"https://aws.amazon.com/amplify/\">AWS Amplify</a> hooks up to the frontend repository via GitHub webhook.\nAnd every time anything is pushed into <code>main</code> branch, Amplify gets notified and the internal CI/CD machinery kicks in.\nAmplify is smart enough to understand that it's connected to the angular app (this actually doesn't matter,\nbecause it builds a project with a silly <code>npm run build</code> script).</p>\n<p>Build artifact is then stored in AWS S3 bucket\n(unfortunately, or not, this bucket is not accessible)\nand then exposed via CloudFront distribution(also not accessible).\nBy &quot;not accessible&quot; I mean that it's not created under my account, I can't look at it or touch it.\nIt exists, but somewhere within the bowels of AWS.\nServerless, right?</p>\n<p>AWS S3 is a perfect place for frontend artifacts – infinitely scalable, ultimately robust, publicly accessible(when\nneeded), cheap.\nIt just works.\nI have a strong impression that AWS S3 powers at least half of the internet,\nand so I'm trusting it to host my amazing frontend.</p>\n<p>A couple of clicks more and the custom domain is attached.</p>\n<p>Voilà!</p>\n<p>My FE is running under http://buyallmemes.com.</p>\n<p>Minimum configuration, maximum profit.</p>\n<p>And this is just the tip of the iceberg.\nWith a couple of clicks more, Amplify could be integrated with GitHub PRs.\nIt will spin a new env per PR created, and when PR is merged - it will tear the env down.\nSome organizations I've worked for could only dream about such a feature.\nAnd here it is out of the box.</p>\n<h3>AWS AppRunner</h3>\n<p>After the first blog post, I had no backend for my blog application.</p>\n<p>— &quot;Do I even need a backend?&quot; - was my question.</p>\n<p>— Of course, I'm a backend developer, I have to have a backend.</p>\n<p>— Alright, let's have it.</p>\n<p>Building the backend is straightforward.\nCode here, code there — I've been doing this for the last 15 years, so I'm feeling somewhat comfortable.\nThe real question is &quot;How to run it?&quot;</p>\n<p>EKS?\nHell no, I'm not touching Kubernetes.\nI'm sick of it.\nIt's too complex.\nMoreover, I want to run a single container.\nTo say that EKS is an overkill in this situation is a huge understatement.</p>\n<p>ECS?\nSounds better.\nLet's do it.\nI've created a cluster, task definition, created a task... and nothing.\nI can't access my service from the outside.\nOh, no... networking.\nSomething is not right with the VPC setup.\nSubset seems fine.\nSecurity groups and routing tables also &quot;look fine.&quot;\nDamn it, something silly is not right, and I can't find it.\nScrew it — a task stopped, task definition deleted, cluster deleted.\nECS is also too complex.</p>\n<p>While in bed and half asleep, I was browsing through the AWS Console app on my phone.</p>\n<p>Eureka!</p>\n<p><a href=\"https://aws.amazon.com/q/\">AWS Q</a>. AWS AI assistant.\nThis is exactly what they built it for — so that idiots like me could ask questions like mine.\nThe answer was instant — <a href=\"https://aws.amazon.com/apprunner/\">AWS AppRunner</a>.</p>\n<p>The next morning I logged in to AWS AppRunner, and clicked a few buttons:</p>\n<ul>\n<li>create service</li>\n<li>select container registry as a repository type</li>\n<li>selected a Hello World image from ECR</li>\n<li>set it to be publicly accessible</li>\n<li>deploy</li>\n</ul>\n<p>And... it worked.\nMy Hello World backend is running in a matter of minutes.\nNo complex configurations, and no networking.\nThis is why I love AWS.</p>\n<p>I've hidden my app deployment via a custom domain http://api.buyallmemes.com by fiddling with Route 53 hosted zone\nand clicking a couple of buttons in the App Runner.\nThankfully, I know a couple of tricks around DNS.</p>\n<p>A couple of clicks more,\nand now the App Runner will automatically redeploy my backend application as soon\nas a new image version is published to ECR.\nAll I need to do is to setup GitHub Action to build and publish images to ECR.\nEasy.</p>\n<p>Once again, no roles, no policies, only profit.</p>\n<p>Now, it's time to build the real backend.</p>\n<h3>Java + Spring = ❤️</h3>\n<p>The choice of tech for the backend is super easy.\nThere's no choice really.\nThere's only one true kind, and it's Java + Spring.\nI'm starting with an extremely simple setup: one REST endpoint that returns a list of posts.\nWhat is a post?\nA simple resource with only one attribute — content.\nFor now, I don't need anything else.</p>\n<p>However, I do need something — Zalando Problem library https://github.com/zalando/problem.\nI'm sure you're aware of Zalando as an internet cloth retailer, but you might not be aware that they have quite a few\ncool bits of software.\nProblem Library is one of those bits.\nIt's a small library with a single purpose — to unify an approach for expressing errors in REST API.\nInstead of figuring out every time what to return in case of error,\nor returning gibberish (like a full Spring Web stack stace in case of 500),\nthe zalando/problem library suggests returning their little <code>Problem</code> structure.\nNaturally, a library has an awesome integration with Spring, so there's very little configuration required.\nUse it, and do yourself (and your REST API consumers) a favor.</p>\n<p>Another one of those hidden gems is a Zalando RESTful API\nGuidelines https://opensource.zalando.com/restful-api-guidelines/ — read it.\nIt's awesome.</p>\n<p>So, after the initial setup, I throw a bunch of code in.</p>\n<p><strong>Rule #1: First, make it work, then make it right, then make it fast.</strong></p>\n<p>I don't care about performance at the moment(if ever), so I will ignore the latter part.\nLet's focus on making things work.</p>\n<p>Damn it, I need a database to store posts!\nOr do I?\nHmm, why the hell would I need an enterprise-grade DB (like PostgreSQL) to store a single post - sounds absurd.\nI will store it on disk as part of the source code!\nMy IDE is the perfect <code>.MD</code> editor.\nGit will provide me with all the version control I ever need.\nI can just branch out of the <code>main</code>, write whatever I want, and then merge it back when it's ready to be published.\nAnd it's free!</p>\n<p>Well, I need to redeploy the backend every time I write or change the post,\nbut for now, this is not a big deal, so this mechanism will suffice.\nI've set AWS AppRunner to automatically detect and deploy the newest image versions of my backend.\nSo I don't have to do much manual stuff, besides building an image.</p>\n<p>Btw, how am I supposed to build and push the image into ECR?\nI'm not writing Dockerfile — that's for sure.\nGoogle Jib, https://github.com/GoogleContainerTools/jib.</p>\n<p>Simple jib gradle plugin declaration in <code>build.gradle</code>(Gradle FTW!),\nset <code>jib.from.image</code> parameter to <code>amazoncorretto:21-alpine</code>, set <code>jib.to.image</code> to my ECR repo.\nQuick <code>aws ecr get-login-password...</code> from ECR documentation, <code>./gradlew jib</code> and off flies my images.\nEasy enough.\nI will automate it later.\nI think GitHub Actions is what cool kids are using (I'm more of a GitLab user,\nbut for the sake of exercise, I decided to publish everything on GitHub).</p>\n<p>Alright, for now, that's enough.\nI have a running Angular frontend and Java backend.\nFrontend knows how to talk with the backend.\nThe backend returns a list of posts, which are stored in the <code>resources</code> folder.\nBackend logic is rather silly</p>\n<ul>\n<li>Read files from <code>resources/blog/posts</code> project folder</li>\n<li>Load each file content as a string into a Post object</li>\n<li>Sort loaded posts by filename in descending order</li>\n</ul>\n<p>And yes, I've introduced <code>fileName</code> attribute to the <code>Post</code>.\nAnd that's about it.\nI already established a minimal flow of work.</p>\n<p>At the moment, there's little to talk about.\nThere's little code and one cute unit test.\nI guess this is worth talking about — I'm a huge fan of TDD.\nI love my tests.\nAt the moment, I have only one crucial test that covers the two most important aspects — REST endpoint and posts\nare properly ordered.\nI decided to use file naming as a sort parameter.\nEach new post file will be prefixed by the current date,\nso I could easily sort them in reverse order to show the latest posts on top and the oldest at the bottom.\nSince I'm a backend guy, I prefer to keep such logic at the back.\nI don't want to spend much time on the frontend, so I will try to keep it as lean as possible.\nSaying that, the more I think about it, the more I realize that I should've gone with something like a thymeleaf,\nand built everything within the backend app, but what's done is done.\nHaving a separate frontend app is not without its benefits anyway.\nPlus, I can definitely benefit from expanding my horizons beyond the backend and Java.</p>\n",
    "date": "31.03.2024",
    "title": "Let's build",
    "anchor": "lets-build"
  },
  {
    "filename": "20240329-hello-world.md",
    "content": "<p>I hate frontend. But at least, I figured out how to use markdown to render content, so I don't have to struggle with\nWYSIWYG editors, at least now.</p>\n<p>But where was I... Oh yes, <strong><em>BLOG</em></strong>! I'm building a blog - something you've never heard of or seen before, right? I\nhope you can read through my sarcasm, I'm using it a lot, and I'm not going to tell you where - figure it out by\nyourself.</p>\n<p>The idea is straightforward — share <strong>my</strong> knowledge, thoughts and opinions on software stuff.\nAnd there's no better way to do it, but via examples.\nSo, let's do it!</p>\n<p>I'm going to build a blog while covering certain aspects of the building process in this blog.\nSo you could see patterns in action.\nI'm going to start simple, heck, I'm a backend developer, who claims to be proficient in Java and\ndistributed systems, but I'm writing this in .MD file, which I will copy-paste into a <code>component</code> file.</p>\n<p>I want to make this process agile and iterative while doing only what is necessary to build what I want now.\nSo, for now, it's a single-repo-almost-a-static-page-thingy - https://github.com/buyallmemes/blog.</p>\n<p>Also, I kinda enjoy writing from time to time + I'm a programmer, so why not combine the best of both worlds — create a\nplace where a can park some of my thoughts for good.</p>\n",
    "date": "29.03.2024",
    "title": "Hello, World!",
    "anchor": "hello-world"
  }
]