#!/usr/bin/env node

/**
 * Dynamic route generator for blog posts
 * Fetches blog posts from API and generates routes for prerendering
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

// Configuration
const API_URL = 'https://api.buyallmemes.com/posts';
const OUTPUT_FILE = path.join(__dirname, '../src/app/prerender-routes.ts');

// Fallback routes when API is not available (e.g., during local development)
const FALLBACK_ROUTES = [
  '/',
  '/blog/hello-world',
  '/blog/lets-build', 
  '/blog/practical-dependency-inversion-principle',
  '/blog/circular-dependencies',
  '/blog/ultimate-testing-guideline',
  '/blog/let-go'
];

/**
 * Fetch blog posts from API
 */
function fetchPostsFromAPI() {
  return new Promise((resolve, reject) => {
    console.log(`🌐 Fetching posts from API: ${API_URL}`);
    
    https.get(API_URL, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          if (response.posts && Array.isArray(response.posts)) {
            console.log(`✅ Fetched ${response.posts.length} posts from API`);
            resolve(response.posts);
          } else {
            console.error('❌ Invalid API response format');
            reject(new Error('Invalid API response format'));
          }
        } catch (error) {
          console.error('❌ Failed to parse API response:', error.message);
          reject(error);
        }
      });
    }).on('error', (error) => {
      console.error('❌ API request failed:', error.message);
      reject(error);
    });
  });
}

/**
 * Convert title to URL-friendly anchor
 */
function titleToAnchor(title) {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/-+/g, '-') // Replace multiple hyphens with single
    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
}

/**
 * Generate routes from API posts
 */
async function generateRoutesFromAPI() {
  console.log('🔄 Generating prerender routes from blog posts...');
  
  try {
    const posts = await fetchPostsFromAPI();
    const routes = ['/'];
    
    for (const post of posts) {
      if (post.title && post.anchor) {
        const route = `/blog/${post.anchor}`;
        routes.push(route);
        console.log(`✅ Found post: "${post.title}" -> ${route}`);
      } else {
        console.warn(`⚠️  Invalid post format:`, post);
      }
    }
    
    writeRoutesFile(routes, 'API');
    
  } catch (error) {
    console.warn('⚠️  Failed to fetch from API, using fallback routes...');
    console.error('Error details:', error.message);
    writeRoutesFile(FALLBACK_ROUTES, 'fallback');
  }
}

/**
 * Write routes to file
 */
function writeRoutesFile(routes, source) {
  const routesList = routes.map(route => `  '${route}'`).join(',\n');
  const tsContent = `// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// Generated by: npm run generate-routes
// Generated at: ${new Date().toISOString()}
// Source: ${source}

export default [
${routesList}
];
`;

  fs.writeFileSync(OUTPUT_FILE, tsContent);
  console.log(`✅ Generated ${routes.length} routes in ${OUTPUT_FILE}`);
  console.log('📦 Routes:', routes);
}

// Run the generator
generateRoutesFromAPI();