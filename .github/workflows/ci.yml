name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'

jobs:
  quality-checks:
    name: Quality Assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: ESLint code analysis
        run: npm run lint

      - name: Build verification
        run: npm run build
        env:
          NODE_ENV: production

  e2e-testing:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run Playwright E2E tests
        run: npm test
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: test-results/
          retention-days: 7

  deployment-ready:
    name: Deployment Verification
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-testing]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Production build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Build size analysis
        run: |
          echo "## Build Analysis üìä" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
          du -sh .next/ >> $GITHUB_STEP_SUMMARY
          echo "### Generated Pages" >> $GITHUB_STEP_SUMMARY
          find .next/server/app -name "*.html" | wc -l >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ github.sha }}
          path: |
            .next/
            public/
          retention-days: 3

      # AWS Amplify handles deployment automatically via webhook
      # This job serves as final verification before Amplify deployment
      - name: Deployment status
        run: |
          echo "‚úÖ All checks passed - Ready for AWS Amplify deployment"
          echo "üöÄ Deployment will be triggered automatically by Amplify"
          echo "üìç Production URL: https://buyallmemes.com"
          echo "üìç Staging URL: https://main.d6a01bwd8g2xq.amplifyapp.com"

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Dependency vulnerability check
        run: npx audit-ci --moderate
